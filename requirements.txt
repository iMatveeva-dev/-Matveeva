# Інсталюємо необхідну бібліотеку перед використанням:
# pip install rpy2


# Імпортуємо бібліотеку rpy2
import rpy2.robjects as robjects  # Для доступу до функцій і об'єктів R


# Імпортуємо numpy для створення масивів у Python
import numpy as np


# 1. Демонстрація виконання простих R-команд із Python
# Ми будемо використовувати функцію r() для виконання R-коду


# Визначимо просту R-функцію обчислення середнього значення
# У R ця функція виглядає так: mean(c(1, 2, 3, 4, 5))
robjects.r('''
    my_mean <- function(values) {
        return(mean(values))
    }
''')


# Тепер викликаємо R-функцію my_mean у Python
# Створюємо список чисел у Python
python_data = [1, 2, 3, 4, 5]


# Конвертуємо список Python у вектор R
r_data = robjects.FloatVector(python_data)


# Викликаємо R-функцію my_mean, яку ми визначили раніше
r_mean_function = robjects.globalenv['my_mean']  # Отримуємо доступ до R-функції
result_from_r = r_mean_function(r_data)  # Передаємо дані у функцію


# Виводимо результат
print("Середнє значення (обчислене в R):", result_from_r[0])


# 2. Виконання аналогічного обчислення в Python для порівняння
# Використовуємо бібліотеку numpy
python_mean = np.mean(python_data)


print("Середнє значення (обчислене в Python):", python_mean)


# 3. Обмеження інтеграції R та Python
# - Необхідність встановлення R і rpy2
# - Може бути складно налагоджувати помилки, якщо вони виникають у R-коді
# - Конвертація даних між Python і R може бути неефективною для великих наборів даних